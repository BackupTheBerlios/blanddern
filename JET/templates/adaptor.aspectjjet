<%@ jet package="translated" imports="filtering.* adaptor.* launcher.* org.eclipse.emf.ecore.*" class="AdaptorGeneration"%>
<% ArgumentsList args = (ArgumentsList) argument; %>
<% String className = args.getEClass(); %>

privileged aspect TestAspect {
	<% for(int i=0;i<args.getModel().getCorrespondanceRule().size();i++){ %>
		<% String methodeName = args.getModel().getCorrespondanceRule().get(i).getFeature().getName(); %>
		<% CorrespondanceRule correspondanceRule = args.getModel().getCorrespondanceRule().get(i); %>
		
		<% String packageName = correspondanceRule.getProperty().getGetPart().getProxy().getPackage(); %>
		
		private <% if (packageName!="") { %><%=packageName%>.<% } %><%=correspondanceRule.getProperty().getGetPart().getProxy().getType().getName()%> <%= args.getEClass() %>.<%= correspondanceRule.getProperty().getGetPart().getProxy().getName() %>;
		
		pointcut getter<%=i%>(<%=className%> self) : target(self) && execution(<%=correspondanceRule.getFeature().getEType().getInstanceTypeName()%> <%= className %>.get<%=methodeName.replaceFirst(".",(methodeName.charAt(0)+"").toUpperCase()) %>());
		<% if(correspondanceRule.getProperty().getSetPart() != null) { %>
		pointcut setter<%=i%>(<%=className%> self, <%=correspondanceRule.getFeature().getEType().getInstanceTypeName()%> newValue) : target(self) && execution(void <%= className %>.set<%=methodeName.replaceFirst(".",(methodeName.charAt(0)+"").toUpperCase())%>(*)) && args(newValue);
		<% } %>
		
		<%=correspondanceRule.getFeature().getEType().getInstanceTypeName()%> around (<%=className%> self) : getter<%=i%>(self){
			<% FeatureFilter filter = new FeatureFilter(correspondanceRule);%>
			return self.<%=correspondanceRule.getProperty().getGetPart().getRequest().getExpression()%>;
		}
		
		<% if(correspondanceRule.getProperty().getSetPart() != null) { %>
		void around(<%=className%> self, <%=correspondanceRule.getFeature().getEType().getInstanceTypeName()%> newValue) : setter<%=i%>(self, newValue){
			self.<%=correspondanceRule.getProperty().getSetPart().getRequest().getExpression()%>;
		}
		<% } %>
<% } %>
}


