<%@ jet package="translated" imports="launcher.* adaptor.* filtering.* interpretor.* java.util.*" class="RunQueryGeneration" %>
<%ArgumentsRunQuery args = (ArgumentsRunQuery) argument; %>
<% Adaptor adapt = args.getModel(); %>
<% String packFactoryName = args.getFactoryPath();%>
<% String implPath = args.getImplPath();%>
<% Map map = args.getMap(); %>

package filtering;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EAttribute;
import java.util.*;
import java.io.*;
import patternsEngine.*;

class RunQuery {

private ItfPatternEngine pe;

public RunQuery(ItfPatternEngine pe){
 this.pe = pe;
}

<% for(int i=0;i<adapt.getMatching().size();i++) { %>

	public EObject [] runPattern<%=i+1%>(EObject eo) {
		String prologFileName = "rp<%=i+1%>.pl";
		File prologFile = new File(prologFileName);
		Map prologResult = pe.executesProlog(prologFile);
		<%Matching currentMatching = adapt.getMatching().get(i);%>
		<%LhsPattern lhsPattern = currentMatching.getLhs();%>
		boolean isLhsPattern = false;
		EObject [] res = null;
		
			<% for(int j=0; j<lhsPattern.getComposed().size(); j++){ %>
				if(eo.eClass().getName().equalsIgnoreCase("<%=lhsPattern.getComposed().get(j).getConcept().getName()%>")){
					isLhsPattern = true;
				}
			<% } %>
		
		if(isLhsPattern==true) {
			<%=packFactoryName%> objectInstanced = <%=packFactoryName%>.eINSTANCE;
			<% boolean instanced = false; %>
			
			<% Interpretor interpret = new Interpretor(); %>
			<% for(int w=0; w<currentMatching.getLhs().getComposed().size(); w++){ %>
				<% String lhsName = currentMatching.getLhs().getComposed().get(w).getName(); %>
				<% interpret.addVar(lhsName, map.get(lhsName)); %>
			<% } %>
			
			<% int k=0; %>
			<% while(!instanced && k<currentMatching.getRhs().size()){ %>
					<% if(currentMatching.getRhs().get(k).getQuery()==null){ %>
						<% instanced = true; %>
					<% }else{ %>	
							<% if(interpret.getInterpretorResult(currentMatching.getRhs().get(k).getQuery().getRequest().getLangage().toString().toLowerCase(), currentMatching.getRhs().get(k).getQuery().getRequest().getExpression()).getResult().toString().equalsIgnoreCase("true")){ %>
								<% instanced = true; %>
							<% } %>
					<% } %>
					
					<% if(instanced){ %>
						<% for(int l=0; l<currentMatching.getRhs().get(k).getComposed().size(); l++){ %>
							<% Instance rhsInst = currentMatching.getRhs().get(k).getComposed().get(l); %>
							<% String objectType = implPath+"."+rhsInst.getConcept().getName()+"Impl";%>
							<% String objectName = "o"+l; %>
							<% String createMethodName = "create"+rhsInst.getConcept().getName()+"()";%>
							
							<%=objectType%> <%=objectName%> = (<%=objectType%>)objectInstanced.<%=createMethodName%>;
							
							<% for(int z=0; z<currentMatching.getLhs().getComposed().size(); z++){ %>
								<% Instance lhsInst = currentMatching.getLhs().getComposed().get(z); %>
								
								<% if(lhsInst.isIsMain()){ %>
									<% String castPrologResult = "("+lhsInst.getConcept().getEPackage().getName()+"."+lhsInst.getConcept().getName()+")";%>
									<%=objectName%>.<%=lhsInst.getName()%> = <%=castPrologResult%>prologResult.get("<%=lhsInst.getName()%>");
								<% } %>
							<% } %>
							
							res[<%=l%>]=<%=objectName%>;
						<% } %>
					<% } %>
					<% k++; %>
			<% } %>
			
			<% if(!instanced){ %>
				return null;
			<% }else{ %>
				return res;
			<% } %>
		}else{
			return null;
		}
	}
<% } %>
}