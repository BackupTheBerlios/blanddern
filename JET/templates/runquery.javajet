<%@ jet package="translated" imports="launcher.* adaptor.* filtering.* java.util.*" class="RunQueryGeneration" %>
<%ArgumentsRunQuery args = (ArgumentsRunQuery) argument; %>
<% Adaptor adapt = args.getModel(); %>
<% String packFactoryName = args.getFactoryPath();%>
<% String implPath = args.getImplPath();%>

package filtering;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EAttribute;
import java.util.*;
import java.io.*;
import patternsEngine.*;
import interpretor.*;
import utils.AdapterRelay;

/**
 * 
 * @author Jeremie SCHEER & Loic SUTTER
 *
 */

class RunQuery {

private ItfPatternEngine pe;

public RunQuery(ItfPatternEngine pe){
 this.pe = pe;
}

<% for(int i=0;i<adapt.getMatching().size();i++) { %>

	public EObject [] runPattern<%=i+1%>(EObject eo) {
		String prologFileName = "prologFiles/rp<%=i+1%>.pl";
		File prologFile = new File(prologFileName);
		Set<Map> prologResult = pe.executesProlog(prologFile);
		<%Matching currentMatching = adapt.getMatching().get(i);%>
		<%LhsPattern lhsPattern = currentMatching.getLhs();%>
		boolean isLhsPattern = false;
		EObject[] res = null;
		
			<% for(int j=0; j<lhsPattern.getComposed().size(); j++){ %>
				<% if(lhsPattern.getComposed().get(j).isIsMain()){ %>
					if(eo.eClass().getName().equalsIgnoreCase("<%=lhsPattern.getComposed().get(j).getConcept().getName()%>")){
						isLhsPattern = true;
					}
				<% } %>
			<% } %>
		
		if(isLhsPattern==true) {
			boolean isMapped = false;
			Map correctMap = null;
			
			<% int firstMain = -1; %>
			<% int a=0; %>
			<% while(firstMain==-1 &&  a<currentMatching.getLhs().getComposed().size()){ %>
				<% if(currentMatching.getLhs().getComposed().get(a).isIsMain()){ %>
					<% firstMain = a; %>
				<% } %>
				<% a++; %>
			<% } %>
			
			<% if(firstMain==-1){ %>
				return null;
			<% }else{ %>
			
				Iterator it = prologResult.iterator();
				while(it.hasNext()){
					Map tmp = (Map)it.next();
	
					if(tmp.get("Var<%=currentMatching.getLhs().getComposed().get(firstMain).getName()%>")==eo){
						if(isMapped){
							System.err.println("There can be only one map matching the EObject parameter");
							System.exit(-1);
						}else{
							correctMap = tmp;
							isMapped = true;
						}
					}
				}
				
				if(correctMap==null){
					return null;
				}
			
				<%=packFactoryName%> objectInstanced = <%=packFactoryName%>.eINSTANCE;
				 boolean instanced = false;
				
				Interpretor interpret = new Interpretor();
				<% for(int w=0; w<currentMatching.getLhs().getComposed().size(); w++){ %>
					<% if(currentMatching.getLhs().getComposed().get(w).isIsMain()){ %>
						<% Instance lhsInstInterpret = currentMatching.getLhs().getComposed().get(w); %>
						<% String castForInterpret = "("+lhsInstInterpret.getConcept().getEPackage().getName()+"."+lhsInstInterpret.getConcept().getName()+")";%>
						<% String lhsName = currentMatching.getLhs().getComposed().get(w).getName(); %>
						
						 interpret.addVar("<%=lhsName%>", <%=castForInterpret%>correctMap.get("Var<%=lhsName%>"));
					<% } %>
				<% } %>
				
				
				<% for(int k=0; k<currentMatching.getRhs().size(); k++){ %>
						<% if(currentMatching.getRhs().get(k).getQuery()==null){ %>
							instanced = true;
						<% }else{ %>
								 if(interpret.getInterpretorResult("<%=currentMatching.getRhs().get(k).getQuery().getRequest().getLangage().toString().toLowerCase()%>", "<%=currentMatching.getRhs().get(k).getQuery().getRequest().getExpression()%>").getResult().toString().equalsIgnoreCase("true")){
									instanced = true;
								 }
						<% } %>
						
						if(instanced){
							res = new EObject[<%=currentMatching.getRhs().get(k).getComposed().size()%>];
							<% for(int l=0; l<currentMatching.getRhs().get(k).getComposed().size(); l++){ %>
								<% Instance rhsInst = currentMatching.getRhs().get(k).getComposed().get(l); %>
								<% String objectType = implPath+"."+rhsInst.getConcept().getName()+"Impl";%>
								<% String objectName = "o"+l; %>
								<% String createMethodName = "create"+rhsInst.getConcept().getName()+"()";%>
								
								<%=objectType%> <%=objectName%> = (<%=objectType%>)objectInstanced.<%=createMethodName%>;
								
								<% for(int z=0; z<currentMatching.getLhs().getComposed().size(); z++){ %>
									<% Instance lhsInst = currentMatching.getLhs().getComposed().get(z); %>
									
									<% if(lhsInst.isIsMain()){ %>
										<% String castPrologResult = "("+lhsInst.getConcept().getEPackage().getName()+"."+lhsInst.getConcept().getName()+")";%>
										<%=objectName%>.<%=lhsInst.getName()%> = <%=castPrologResult%>correctMap.get("Var<%=lhsInst.getName()%>");
										<%=objectName%>.<%=lhsInst.getName()%>.eAdapters().add(new AdapterRelay(<%=objectName%>));
									<% } %>
								<% } %>
								
								res[<%=l%>]=<%=objectName%>;
							<% } %>
							
							System.out.println("Proxies initialized");
							return res;
						 }
				<% } %>
				return null;
			<% } %>
		}else{
			return null;
		}
	}
<% } %>
}